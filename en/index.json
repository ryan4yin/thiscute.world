[{"categories":["tech"],"content":" PrefaceAfter resigning at the end of January, I spent time at home for the Chinese New Year, then traveled around Shanghai, Zhangjiajie, Chongqing, Suzhou, and Nanjing. I didn’t return to Shenzhen to start job hunting until mid-April. Initially, I wasn’t sure if I would have time to attend KubeCon China 2025 in June. However, I was fortunate that the company I received an offer from highly values technology. During the interview, my leader mentioned seeing my KubeCon experiences in my blog and said the company strongly encourages participation in such technical exchange events, even supporting giving talks with full expense coverage. So, less than a month after joining, I went on a company-funded trip to KubeCon China 2025 in Hong Kong (: I asked my colleagues if they were interested, but for various reasons, I ended up being the only one attending (sad ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:1:0","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#preface"},{"categories":["tech"],"content":" TL;DRIn short, this year’s KubeCon China was almost entirely focused on AI on Kubernetes - it could have been renamed to CloudNative AI Con. This year’s KubeCon China was only two days long, with significantly fewer talks than last year - almost half as many. As a result, I also watched many KubeCon Europe 2025 talks online as a supplement. Overall, my impressions this year were: Kubernetes has become a mature foundation - anything that can run on K8s will eventually be moved to K8s AI has brought new life to the CloudNative community, with many new CloudNative projects emerging around AI in the past two years. AI topics have become the absolute main theme of KubeCon. The AI deployment section mainly discussed AI inference, with key technical points: distributed inference, scaling, and LLM-Aware load balancing, as well as AI model distribution There were several discussions about AIOps, from simple ChatBot implementations to more complex Multi-Agent systems for tasks like cloud cost analysis and optimization Kuaishou attempted to use Logs/Metrics to train a model for each service in their ultra-large-scale cluster to dynamically adjust HPA, achieving a balance between SLA and cost (if I remembered incorrectly, I take no responsibility hhh) OpenTelemetry is maturing and getting closer to its goal of unifying Logs/Traces/Metrics signals Platforms like Uptrace have emerged as unified observability platforms, fully utilizing OTel’s labels to correlate Logs/Traces Current best practice is to still use traditional methods for collecting Logs and Metrics at the Infra level, while at the APP level, OTel handles all Logs, Traces, and Metrics, correlating them through Span ID with consistent label semantics WASM is still exploring its use cases, with this year’s main focus being running small models at the edge KubeCon China 2025 and KubeCon Europe 2025 video playlists: KubeCon + CloudNativeCon China 2025 (Hong Kong) - Youtube KubeCon + CloudNativeCon Europe 2025(London) - Youtube Presentation slides can be downloaded here (NOTE: not all talks will have PDFs uploaded): KubeCon + CloudNativeCon China 2025 - Schedule KubeCon + CloudNativeCon Europe 2025 - Schedule Next, I’ll introduce some interesting content I heard, organized by topic, along with corresponding video links and possible PPT links. ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:2:0","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#tldr"},{"categories":["tech"],"content":" Talks","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:0","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#talks"},{"categories":["tech"],"content":" Unified LLM Inference SolutionIntroducing AIBrix: Cost-Effective and Scalable Kubernetes Control Plane for VLLM - Jiaxin Shan \u0026 Liguang Xie, ByteDance AIBrix is a complete solution for running distributed LLM inference on K8s, including: Distributed inference deployment LLM scaling LLM request routing (load balancing) Distributed KV cache Mainly centralized storage of this data to reduce HBM memory usage and lower memory requirements Dynamic LoRa loading … AIBrix is currently under the vllm-project, with a good number of stars, suggesting the project is healthy and worth following. ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:1","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#unified-llm-inference-solution"},{"categories":["tech"],"content":" Distributed LLM Inference DeploymentMore Than Model Sharding: LWS \u0026 Distributed Inference - Peter Pan \u0026 Nicole Li, DaoCloud \u0026 Shane Wang, Intel One of the most interesting talks, covering distributed inference architecture, optimization points, and the advantages and usage of LWS. Simply put, LWS is a CRD specifically designed for LLM distributed inference deployment, mainly supporting group scheduling for LLM tasks. NOTE: According to an issue, AIBrix might integrate with LWS (possibly with official support): https://github.com/vllm-project/aibrix/issues/843#issuecomment-2728305020 ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:2","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#distributed-llm-inference-deployment"},{"categories":["tech"],"content":" LLM Scaling and Load Balancing KubeCon EU 2025 - Optimizing Metrics Collection \u0026 Serving When Autoscaling LLM Workloads Quite entertaining, but since I’m familiar with this area, I could guess it was about custom business metrics + KEDA for custom metrics-based scaling, so I just skimmed through it KubeCon EU 2025 - Keynote: LLM-Aware Load Balancing in Kubernetes: A New Era of Efficiency - Clayton Coleman, Distinguished Engineer, Google \u0026 Jiaxin Shan, Software Engineer, Bytedance Very interesting - LLM requests are very different from traditional API requests: Input length varies greatly - some requests have simple inputs and are relatively lightweight, while others might include entire PDFs or other long text inputs. Outputs are similarly variable - if users request deep reasoning, it could lead to significant performance consumption Different machines might use different GPU types with varying performance In a multi-model platform, different models have distinct peak and off-peak periods These characteristics make traditional load balancing strategies completely ineffective ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:3","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#llm-scaling-and-load-balancing"},{"categories":["tech"],"content":" AI Model DistributionAI Model Distribution Challenges and Best Practices Developers discussing how to distribute LLM models of hundreds of GB in size within clusters. Current industry approaches: dragonfly juicefs oci model spec + oci volume (k8s 1.33+) ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:4","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#ai-model-distribution"},{"categories":["tech"],"content":" Observability Antipatterns in Observability: Lessons Learned and How OpenTelemetry Solves Them - Steve Flanders, Splunk Very interesting and informative. The observability antipatterns he listed include: Telemetry Data Incomplete Instrumentation - need to introduce zero-code otel sdk for automatic data collection metrics/logs/metrics signals aren’t all enabled by default, depends on agent implementation In k8s, it’s recommended to disable both stdout logging and traditional prometheus pull /metrics endpoints, letting otel agent handle all App-level signals. Daemonset mode otel (or vector/fluentbit) mainly handles Infra-level logs Over-Instrumentation - need to filter and streamline metrics at the otel-collector level before sending to backend storage Inconsistent Naming Conventions - fully adopt OpenTelemetry solution for unified naming Observability Platform Vendor Lock-in - only choose platforms supporting OTel standards and use OTel naming conventions Tool Sprawl - use unified observability platforms like Uptrace that support automatic Log-Trace correlation Underestimating Scalability Requirements - use OTel for signal collection and choose scalable backend storage like VictoriaMetrics Company Culture Silos and Lack of Collaboration Lack of Ownership \u0026 Accountability KubeCon EU 2025 - From Logs To Insights: Real-time Conversational Troubleshooting for Kubernetes With GenAI - Tiago Reichert \u0026 Lucas Duarte, AWS The opening OnCall skit was very realistic… though getting a phone alert after 1 minute of pod pending seems exaggerated… After the skit, they covered the main content: encoding logs with embed models and storing in OpenSearch for RAG, giving the ChatBot k8s readonly permissions (banned secrets access), then using Deepseek/Claude for Q\u0026A to solve problems Code: https://github.com/aws-samples/sample-eks-troubleshooting-rag-chatbot Portrait Service: AI-Driven PB-Scale Data Mining for Cost Optimization and Stability Enhancement - Yuji Liu \u0026 Zhiheng Sun, Kuaishou Discussed how Kuaishou manages stability and performance optimization in their ultra-large-scale cluster of 200,000 machines Covered relatively basic content - mainly collecting vast amounts of cluster information, processing through a big data system, then training dedicated models, with each service potentially having its own resource optimization model This approach might be too heavy - worth learning from but not very useful in my current work scenario (scale too small) ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:5","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#observability"},{"categories":["tech"],"content":" Service Mesh Revolutionizing Sidecarless Service Mesh With eBPF - Zhonghu Xu \u0026 Muyang Tian, Huawei Mainly covered Huawei’s Kmesh, with detailed explanation of the underlying implementation architecture (actually very similar to what I heard at last year’s KubeCon) Simply put, Ambient Mode intercepts traffic to user-space ztunnel for L4 traffic processing through istio-cni (underlying iptables), while Kmesh implements these L4 functions at the kernel level using eBPF. Also briefly introduced Cilium Service Mesh, a Per-Node Proxy, with main drawbacks being the requirement for Cilium network plugin and its primitive, complex CRDs Kmesh also attempted to implement HTTP protocol parsing with eBPF, but this requires kernel patching, which is costly KubeCon EU 2025 - Choosing a Service Mesh - Alex McMenemy \u0026 Dimple Thoomkuzhy, Compare the Market While most of what I’ve encountered uses Istio, it’s always good to see how others make their choices KubeCon EU 2025 - Navigating the Maze of Multi-Cluster Istio: Lessons Learned at Scale - Pamela Hernandez, BlackRock Multi-cluster Istio is used in quite a few large companies - I was asked about it in interviews, worth trying out KubeCon EU 2025 - A Service Mesh Benchmark You Can Trust - Denis Jannot, solo.io Creating a good benchmark comparison takes a lot of time and effort - it’s most convenient to just look at the results others provide (: ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:6","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#service-mesh"},{"categories":["tech"],"content":" Ingress-NginxThe Next Steps for Ingress-NGINX and the Ingate Project - Jintao Zhang, Kong Inc. Ingress-NGINX is finally being retired, with its successor being InGate, though InGate is currently almost empty (: ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:7","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#ingress-nginx"},{"categories":["tech"],"content":" SecurityKeynote: Who Owns Your Pod? Observing and Blocking Unwanted Behavior at eBay With eBPF Mainly introduced cilium’s tetragon, an eBPF-based K8S security tool, somewhat similar to apparmor but capable of more fine-grained permission management. A friend argued that such tools aren’t very necessary - we should use GitOps processes and move security checks to the CICD pipeline. ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:8","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#security"},{"categories":["tech"],"content":" Cloud Cost Analysis and OptimizationKubeCon EU 2025 - Autonomous Al Agents for Cloud Cost Analysis - Ilya Lyamkin, Spotify Implementation of a Multi-Agent system that automatically creates plans, writes SQL and Python for cloud cost analysis - very valuable reference. ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:9","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#cloud-cost-analysis-and-optimization"},{"categories":["tech"],"content":" WASM RelatedKeynote: An Optimized Linux Stack for GenAI Workloads - Michael Yuan, WasmEdge Discussed using WasmEdge + LlamaEdge to run small LLM models on edge devices - quite interesting. ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:10","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#wasm-related"},{"categories":["tech"],"content":" How to Build an AI WorkflowKubeCon EU 2025 - Tutorial: Build, Operate, and Use a Multi-Tenant AI Cluster Based Entirely on Open Source An hour-plus tutorial by IBM. Installed many components including Kueue, Kubeflow, PyTorch, Ray, vLLM, and Autopilot ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:3:11","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#how-to-build-an-ai-workflow"},{"categories":["tech"],"content":" Non-TechAttending KubeCon isn’t just about listening to technical changes and progress from the past year - it’s also an important opportunity to socialize with developers from various fields, kind of like a large-scale online friend meetup (: This year, I got @scruelt, @ox-warrior, and other friends to come to KubeCon, and at the venue, I met up with @cookie, @rizumu, @ayakaneko, and @dotnetfx35 for casual chats. I received Kubernetes and Go cookies printed with 3D printers from @rizumu and@ayakaneko, and incidentally spread the word about NixOS (: Meetup successful! Also spread the word about NixOS K8s/Go cookies and Istio fridge magnets received On Day 2 morning, I found there weren’t many talks I wanted to attend, so I noticed there was a Peer Group Meeting to join, though it required signing up first. I went with@scruelt to sign up, and we were a bit worried that signing up just 20 minutes before might be too late, but when we got to the meeting room, we found only 3 mentors present, so we just chatted casually with them. The three mentors were Nate Waddington (Head of Mentorship \u0026 Documentation, Canada), Kohei Ota (CNCF Ambassador, Japan), and Amit DSouza (co-founder of Odyssey Cloud, Australia). A Cisco engineer also joined in halfway through. It was mostly casual conversation. @scruelt’s English is better than mine, and since he just resigned, he had many questions to ask - he initiated most of the topics. As for me, since everything has been going smoothly lately, I didn’t have many questions to ask. Entered the Peer Group Meeting to find only Mentors hhh Let’s end with some photos. Welcome to KubeCon China 2025 Got a T-shirt first hehe Coffee break time Want that SUSE plush toy! A small SUSE on a big SUSE Using tetragon to restrict file access LWS Talk, discussing PD separation Switch store promoting Miku Boxing Three friends bought Switch 2 here during KubeCon, they made a killing All my 'loot' hhh Boarding, goodbye Shenzhen How many times have I flown now? Had a great time, see you next year! ","date":"2025-06-15","objectID":"/en/posts/kubecon-china-2025/:4:0","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","AI","LLM","OpenTelemetry"],"title":"KubeCon China 2025 Experience","uri":"/en/posts/kubecon-china-2025/#non-tech"},{"categories":["tech"],"content":" PrefaceI had known for a while that KubeCon China would be held in Hong Kong this year, and while I was interested, I initially got deterred by the steep price of KubeCon tickets. Sometimes you just have to believe in the magic of luck. By a twist of fate, I learned about KubeCon’s ‘End User Ticket Program’ from my friend @Kev and snagged a ticket for free. I also invited three friends from the 0xFFFF Community,@Chever-John,@0xdeadbeef, and@MingLLuo, to join in. We rented an Airbnb in Hong Kong, explored quite a few places in the city, and had a fruitful trip. I also tried to invite other friends and colleagues, but they couldn’t make it for various reasons, which was a bit of a bummer. ","date":"2024-08-27","objectID":"/en/posts/kubecon-china-2024/:1:0","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","MultiCloud","Service Mesh","Istio"],"title":"KubeCon China 2024 Adventure","uri":"/en/posts/kubecon-china-2024/#preface"},{"categories":["tech"],"content":" TL;DRThis post is heavy on images and some non-technical content. For friends who are more interested in the tech side, let me give you a quick summary. After returning from KubeCon, I also watched some other CNCF conference videos, and these are the ones that left an impression: Keynote: Cloud Native in its Next Decade - KubeCon Europe 2024: Discussed the future of CloudNative, drawing conclusions similar to what was heard live at KubeCon China. Another Choice for Istio Multi-Cluster \u0026 Multi-Network Deployment Model - KubeCon Europe 2024: Addressed the pain points of Istio’s multi-cluster solutions and introduced China Mobile’s solution. I’ve always wanted to try multi-cluster solutions but hesitated due to concerns about manageability. This video provided some inspiration. DRA in KubeVirt: Overcoming Challenges \u0026 Implementing Changes - KubeCon Europe 2024: DRA is a new API in K8s, and this talk showed how to use it in kubevirt to solve some issues. It’s evident that K8s has introduced quite a few new things in recent years. Based on the three-day experience at KubeCon China and the content of the videos above, here’s my take: Almost everyone discussing networking was talking about eBPF, Envoy, and Gateway API. Istio’s Ambient Mode attracted many companies that had previously given up on service meshes due to sidecar performance issues. Karmada’s multi-cluster management solution has been put into practical use by many companies and was a frequent topic of discussion. There were also quite a few talks on AI and WASM, but I found them a bit boring as I’m not very interested in those areas. Companies like NIO and China Mobile are trying to apply K8s in edge computing scenarios (smart cars, communication base stations), which seems a bit distant from ordinary internet companies. What will the next decade of cloud native look like? Technologies like Kubernetes and Service Meshes, which emerged over the past decade, have now become “Boring but useful infrastructure” and will serve as the foundation for other cloud native technology trends, widely used but not undergoing much change themselves. Technologies such as AI, eBPF, WASM, and Rust will mature over the next decade, replacing Kubernetes’ current position. The KubeCon China 2024 conference videos will be added to the following YouTube Playlist for those interested to watch: KubeCon + CloudNativeCon + Open Source Summit + AI_dev China 2024 - Youtube The PPTs related to the videos can be downloaded here: KubeCon China 2024 - Schedule ","date":"2024-08-27","objectID":"/en/posts/kubecon-china-2024/:2:0","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","MultiCloud","Service Mesh","Istio"],"title":"KubeCon China 2024 Adventure","uri":"/en/posts/kubecon-china-2024/#tldr"},{"categories":["tech"],"content":" Technical InsightsMy main focus at the conference was on topics related to Istio and Gateway API. I’ve been researching Istio’s Ambient Mode recently and wanted to gain a deeper understanding of the implementation details and trade-offs from the conference. The three days of talks met my expectations well. Core contributors to Istio/Envoy Gateway/Ingress Controller shared the latest advancements in these projects, as well as implementation details and future development directions. Ambient Mode is in beta and was a focal point for me. Here are some key points I’ve gathered: istio/ztunnel: A userspace L4 proxy that only handles L4 traffic. ztunnel establishes connections separately with upstream and downstream, turning a single connection into three (A \u003c=\u003e ztunnel \u003c=\u003e ztunnel \u003c=\u003e B), which incurs performance overhead. Since all traffic is forwarded through ztunnel, updating it can cause a brief traffic interruption. A good solution might be to use a recreate update strategy and roll out updates to all nodes in a node group. ztunnel’s use of the HBONE protocol enforces mTLS, which cannot be turned off, adding performance overhead in scenarios where security is not a concern. istio/proxy: An L7 proxy based on Envoy, deployed separately as a waypoint in ambient mode to handle L7 traffic. In the waypoint architecture, the proxy and the upstream/downstream Pods are likely on different nodes, leading to an additional network hop compared to the sidecar model, which may result in performance loss and increased cross-Zone traffic. Both the waypoint and sidecar are envoy, and the goal is to reduce the number of envoy containers to decrease resource consumption. And some other solutions: kmesh: Similar to Ambient Mode in architecture, it uses eBPF exclusively for the L4 proxy, offering better performance as eBPF modifies network packets directly in the kernel space without establishing separate connections with upstream and downstream. Also, eBPF program updates do not interrupt traffic. cilium service mesh: Features a per-node proxy with L7 envoy proxy running on each node, unlike the waypoint deployed separately via deployment. However, it has some issues: The per-node proxy cannot flexibly adjust resource usage, potentially leading to resource wastage. All traffic on the same node is processed by the same envoy proxy, unable to achieve namespace-level traffic isolation like the waypoint. It is tightly bound to cilium cni and can only be used with cilium cni. It is said to be more complex to use? Overall, KubeCon was a great opportunity to learn about the latest trends in the industry, meet developers of projects, and network with other tech professionals. It helped broaden my technical horizons, maintain my enthusiasm and motivation for technology, and avoid being insular in my company’s business. ","date":"2024-08-27","objectID":"/en/posts/kubecon-china-2024/:3:0","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","MultiCloud","Service Mesh","Istio"],"title":"KubeCon China 2024 Adventure","uri":"/en/posts/kubecon-china-2024/#technical-insights"},{"categories":["tech"],"content":" Itinerary","date":"2024-08-27","objectID":"/en/posts/kubecon-china-2024/:4:0","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","MultiCloud","Service Mesh","Istio"],"title":"KubeCon China 2024 Adventure","uri":"/en/posts/kubecon-china-2024/#itinerary"},{"categories":["tech"],"content":" AccommodationSince we were staying in Hong Kong for three days, accommodation was a necessary consideration. My friends, who had experience with travel and lodging, helped us find an Airbnb not far from the conference venue. The experience was quite pleasant; the room was clean, tidy, and had a certain charm. Although I found it a bit small, my friends said this space is the standard for a family of three or four in Hong Kong and was much better than hotels in the same price range. ","date":"2024-08-27","objectID":"/en/posts/kubecon-china-2024/:4:1","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","MultiCloud","Service Mesh","Istio"],"title":"KubeCon China 2024 Adventure","uri":"/en/posts/kubecon-china-2024/#accommodation"},{"categories":["tech"],"content":" Day 1Even though we booked our accommodations in advance and did some homework, we hit a snag on the first day – persistent rain in Shenzhen led to @Chever-John’s flight being canceled outright, and even the replacement flight was delayed. He arrived at the venue on time, but he had only slept for two hours and didn’t get to stay at the hotel he booked in Shenzhen the night before. On the first day, he seemed pretty out of it during the sessions. But hey, no worries – ~at least I got to enjoy the talks to the fullest. Back to the main event, after picking up our badges, we kicked off our three-day KubeCon China adventure. The technical content has been summarized earlier, so here I’ll just share some photos. The main hall corridor, not a bad view of the sea The corridor leading to various meeting rooms, the hotel service was spot on Tea break during lunch, well-fed and watered Chilled drinks were also on the house, awesome Several bigwigs discussing the future of Istio and Gateway API In the evening, @Mingluo took us on a tour of the Eslite bookstore in Hong Kong. The bookstore had several floors, but there weren’t many books that caught my interest.a Afterward, we visited a bunch of electronic malls and anime merchandise stores, which was quite an eye-opener for me. The cover of 'The Child I Pushed' Another book cover Lots of anime piano scores, including 'April is My Lie' Not sure where we ended up, anime merchandise everywhere Light novel bookstore 1 Light novel bookstore 2 Light novel bookstore 3 That’s about it for day one – a bit of tech talk, some evening exploration in Hong Kong, and then back to rest. ","date":"2024-08-27","objectID":"/en/posts/kubecon-china-2024/:4:2","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","MultiCloud","Service Mesh","Istio"],"title":"KubeCon China 2024 Adventure","uri":"/en/posts/kubecon-china-2024/#day-1"},{"categories":["tech"],"content":" Day 2 Loads of CNCF stickers, free to take, and I grabbed some for my colleagues too My collection of CNCF stickers The day started with a talk by Huawei, introducing the innovative solution of Kmesh. The technical details were presented very well. If you want to check out the PPT and video, head over toRevolutionizing Service Mesh with Kernel Native Sidecarless Architecture - Xin Liu, Huawei Technologies Co., Ltd. Huawei presenting Kmesh How Kmesh achieves hot updates without disconnecting using eBPF I also listened to Mr. Jintao Zhang’s talk onA Decade of Cloud Native Journey: The Evolution of Container Technology and the Kubernetes Ecosystem - Jintao Zhang, Kong Inc. Jintao Zhang, a veteran in the industry, has been playing with Docker since early days In the evening, we took a casual walk and explored the city, checking out the night view by the Hong Kong seaside. Hong Kong's night scenery, quite bustling Bright lights and bustling crowds Came across the Commercial Press on the way ","date":"2024-08-27","objectID":"/en/posts/kubecon-china-2024/:4:3","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","MultiCloud","Service Mesh","Istio"],"title":"KubeCon China 2024 Adventure","uri":"/en/posts/kubecon-china-2024/#day-2"},{"categories":["tech"],"content":" Day 3The highlight of the morning on the third day was the interview with Linus. Getting to see him in person made my trip complete! Linus There weren’t many topics that caught my interest on the third day. After Linus’s interview, I just wandered around, took a group photo with a few friends, and then took the subway home. Our group selfie Our PC and Shark selfie A friend of mine attended a TiDB talk, and the PPT looked pretty interesting, lol. TiDB After three days of walking around the project exhibition hall, I scored four canvas bags, three T-shirts, and a bunch of other small gifts. The food and drinks were more than enough, no need to mention that. Also, I’ve read online that the service industry in Hong Kong has a bad attitude, but this hotel might have been of a higher star rating, and the experience was quite good. All in all, the experience was quite enjoyable, and I’d love to come back next year if I have the chance! Love you, KubeCon China \u0026 Hong Kong! ","date":"2024-08-27","objectID":"/en/posts/kubecon-china-2024/:4:4","series":["Cloud-Native Related"],"tags":["Cloud-Native","Kubernetes","MultiCloud","Service Mesh","Istio"],"title":"KubeCon China 2024 Adventure","uri":"/en/posts/kubecon-china-2024/#day-3"},{"categories":["tech"],"content":"It’s February 2024, exactly 10 months since I started using NixOS. The beginner notes I wrote initially have received a lot of positive feedback and some sponsorships, becoming one of the most popular entry-level tutorials in the entire community. Since I created a dedicated GitHub repository and a separate documentation site for it in June 2023, it has garnered 1189 stars, and besides me, 37 other readers have submitted PRs: NixOS \u0026 Flakes - An Unofficial Beginner’s Guide NixOS \u0026 Flakes Book From the perspective of a seasoned user who has been deeply using NixOS as a primary desktop system for nearly 10 months, I’d like to share my insights from a different angle here. Note that this article is not a NixOS beginner’s tutorial; if you’re looking for one, please follow the link provided above. ","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:0:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#"},{"categories":["tech"],"content":" Nixpkgs Has Too Few Packages?Some people(in China) say that NixOS has too few packages, and this is one of the reasons they don’t use it. Is this true? To clarify, NixOS boasts a substantial number of packages. TheRepository statistics illustrate this as follows: The count of packages in Nixpkgs is indeed inflated by the inclusion of many programming language libraries — it seems that quite a few Haskell developers use Nix as their language package manager. For instance, there areHaskell Packages(18000+),R Packages(27000+), andEmacs Packages(6000+). However, even after subtracting these, Nixpkgs still has over 40000 packages, which, although less than AUR, is hardly a number that corresponds to the description of “too few packages.” The package repository is also a point of differentiation between NixOS and Arch. Arch’s official repository has stringent inclusion criteria, while the AUR ecosystem is quite vibrant. The AUR allows anyone to upload content, and although a voting mechanism serves as a form of review, it feels rather lenient. NixOS takes a different approach. Its official package repository, Nixpkgs, is very receptive to new packages. Submitting a Pull Request to add a package or feature to Nixpkgs is significantly simpler compared to other distributions, which is a key reason for the large number of packages in Nixpkgs (GitHub shows that Nixpkgs has over 5000 contributors, an impressive figure). The update process for the Nixpkgs repository is also more rigorous than that of AUR. PRs generally need to pass a series of GitHub Actions, Maintainer’s Review, andOfborg check and automatic build tests before being merged. Nixpkgs encourages maintainers to add tests for their packages (the doCheck flag is set to true by default), all of which contribute to the overall quality of the packages. NixOS also has a counterpart to AUR, the NUR (Nix User Repository), but due to the permissive nature of Nixpkgs, NUR is not as populated. For example, you can directly download and use QQ(an IM App popular in China) from the Nixpkgs official package repository, while on Arch, you would need to use AUR or archlinux-cn. This can be seen as having its own advantages. NixOS is criticized for having too few packages mainly because it does not follow the FHS standard, which means that most Linux programs downloaded online cannot run directly on NixOS. Of course, there are solutions to this. I suggest first checking if there is already a package for the desired software in Nixpkgs, and if so, use it directly. If not, try some community solutions or package it yourself. Packaging programs is inevitable when using NixOS, as even though Nixpkgs already has a vast number of packages, it’s impossible for it to match all your needs 100% of the time. There will always be packages you want to use but can’t find in Nixpkgs or NUR, and on NixOS, you often have to write a packaging script for your packages to run normally on the system. OK, enough chatter. Let’s move on to the main topic. Firstly, NixOS is much more complex than traditional distributions and has a lot of historical issues. For example, the official documentation is so bad that it forced me, a beginner at NixOS, to write my own beginner’s notes while I was learning. After translating my notes into poor English and posting them on reddit (NixOS \u0026 Nix Flakes - A Guide for Beginners), they received a lot of positive feedback from foreigners (after so much continuous iteration, it has now become one of the most popular beginner tutorials in the community), which also shows how bad the official documentation is. ","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:1:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#nixpkgs-has-too-few-packages"},{"categories":["tech"],"content":" Is NixOS Worth Learning?Is NixOS worth learning, or is the return on investment high enough? In my view, it all comes down to scale. Here, “scale” refers to three aspects: The scale of your custom content for the Linux system: The more customization you do, the harder it is to migrate to a new version. The frequency of system updates: The more frequently you update your system, the higher the risk of encountering issues. The number of your Linux machines: The more machines you have, the more you benefit from a system that can easily replicate the same environment. Let me share my experience with traditional distributions like Arch and Ubuntu, and why I chose NixOS, and the changes it brought me, from a personal perspective. For example, when I used Deepin, Ubuntu and other traditional distros in the past, I didn’t customize the system much for fear of causing problems and not being able to fix them easily. Moreover, any customizations I made were black boxes and not migratable. A month later, I would have forgotten everything, and the system would have become increasingly chaotic and opaque over time. If you’re using a rolling release distribution like Arch, the issues you encounter are generally minor. But with Ubuntu or Deepin, it’s rare for in-place upgrades to go smoothly, which means I had to re-customize everything on the new Ubuntu version. Worse yet, I might have forgotten what I did in the past, meaning I had to spend more time researching my system environment and how everything was installed and configured. This repetitive labor is very painful. Clearly, the more complex and customized the system, the harder it is to migrate to a new version. I think this is why rolling release distributions like Arch, Gentoo, and Fedora are so popular among Linux enthusiasts. Linux users who like to customize their systems mostly use these types of distributions. So can Arch or Fedora solve the problems completely? Obviously not. Firstly, they have a higher update frequency, which means you’re more likely to break something on your system. Of course, this is a small problem, as most Linux users now use btrfs or zfs file system snapshots for rollback in case of issues. Their fundamental problems, however, is: Your Arch system environment, file system snapshots, or virtual machine snapshots are still black boxes. They will become increasingly chaotic with continuous use and do not include the “knowledge” of how to build this environment from scratch, making themunexplainable. In my work, I’ve seen some “ancestral virtual machine snapshots” or “ancestral cloud server snapshots” where no one knows how the environment was set up, and each new person who takes over can only continue to pile on buffs, then pass the time bomb to the next person. This is like the game where people take turns adding water to a cup, and whoever adds water when it overflows is out of luck. Arch essentially requires you to follow its updates continuously, which means you must continuously maintain it. If you let a machine run stable for a year and then decide to update it, the risk of problems is quite high. If you then decide to set up a new Arch machine and restore the old environment, you’re back to the same problem — you have to figure out how to restore your customization process from the old environment, which is also not a pleasant task. Snapshots are strongly associated with the current hardware environment and are easily affected by various strange issues when used directly on different hardware machines, making them unmovable. Snapshots are large binary files, making them expensive to back up and share. Docker can solve some of these problems. Firstly, Docker container images can be fully described by Dockerfiles, meaning they are explainable, and the same environment can be replicated in different environments. This indicates that they are movable. For server environments, running all applications in containers, with the host machine only responsibl","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:2:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#is-nixos-worth-learning"},{"categories":["tech"],"content":" The Declarative Configuration of NixOS - OS as CodePeople with some programming experience should know the importance of abstraction and modularization, as the complexity of a scenario increases, the benefits of abstraction and modularization also increase. The popularity of Terraform, Kubernetes, and even Spring Boot, reflects this. NixOS’s declarative configuration is also like this, as it encapsulates the underlying implementation details and has a community responsible for updating and maintaining these lower-level encapsulations. This greatly reduces my cognitive load and frees up my productivity. Its reproducibility also alleviates my concerns about breaking the system. NixOS is built on top of Nix, a functional package manager, drawing its design philosophy from Eelco Dolstra’s paper The Purely Functional Software Deployment Model. “Purely functional” means it has no side effects, much like a mathematical function $y = f(x)$, where the same NixOS configuration file (input parameter $x$) always yields the same NixOS system environment (output $y$). This means that NixOS’s configuration declares the entire system’s state, OS as Code! As long as you have the source code of your NixOS system and it hasn’t been lost, modifying it, reviewing it, sharing the source code with others, or borrowing features from someone else’s source code is quite straightforward. You can easily copy other NixOS users’ system configurations to ensure you’ll get the same environment. In contrast, copying configurations from users of traditional distributions like Arch or Ubuntu is much more cumbersome, considering the various version differences and environmental peculiarities, leading to a high level of uncertainty. ","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:3:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#the-declarative-configuration-of-nixos---os-as-code"},{"categories":["tech"],"content":" The Learning Curve of NixOSThe entry barrier of NixOS is relatively high and is not suitable for beginners who have never touched Linux and programming. This is because its design philosophy is quite different from traditional Linux distributions. However, this is also its advantage, as once you cross that threshold, you will find a whole new world. For example, reading the source code of Nixpkgs and submitting PRs to add features， add packages or fix bugs is a basic skill for NixOS users, and NixOS users who do this are quite common. This is both a deterrent that scares away new users and a ladder for Linux users who have chosen NixOS. Imagine that most Arch users (like me in the past) might have used Arch for several years but didn’t understand the underlying implementation details of Arch, nor did they package their own software. But with NixOS, diving into the source code becomes a norm, which also shows that understanding its implementation details is not difficult. I will illustrate this point from two aspects. First, Nix is a relatively simple language with very few syntax rules, far simpler than general-purpose languages like Java or Python. Therefore, engineers with some programming experience can master its syntax in just a few hours. With a bit more time, reading common Nix code shouldn’t be too difficult. Second, NixOS’s good declarative abstraction and modularization system divide the OS into many layers, allowing users to focus only on the current layer of abstraction while still having the option to dive deeper into the next layer to more freely implement the desired functions (The right to choose, in fact, also gives users the opportunity to understand NixOS progressively.). For example, new users can normally use NixOS just by understanding the top-level abstraction. When you want to implement some customizations, digging one level deeper into the abstraction (such as customizing some operations directly through systemd’s declarative parameters) is usually enough. If you are already a seasoned NixOS user and want to be more geeky, you can continue to delve deeper. In summary, understanding the source code in Nixpkgs or using Nix to package a few programs is not difficult, and each NixOS user with some experience can also be a NixOS packager. ","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:4:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#the-learning-curve-of-nixos"},{"categories":["tech"],"content":" What Sets NixOS Apart?We’ve heard a lot about NixOS’s strengths, and I’ve mentioned many of them above. People outside the Nix community might mainly hear about its dependency-conflicts-free, the ability to roll back at any time, and its powerful reproducibility. If you have actually used NixOS, you should also know about its other advantages: NixOS’s flakes feature allows you to lock the system to a specific state, and you can update it when you want to, even if it spans a year or two. NixOS does not force you to update your system frequently, you can choose to do this or not at all. Because the state of the system can be completely inferred from your NixOS configuration, it’s much easier to upgrade from a old version to the latest one. It’s always good to have a choice, I don’t like being forced, and neither do sysadmins or DevOps in companies. System updates have similar atomic properties to database transactions, which means your system updates either succeed or fail (usually without intermediate states). NixOS’s declarative configuration actually implements OS as Code, making these configurations very easy to share. You can simply copy the code for the desired functionality from other NixOS users into your system configuration, and you’ll get an identical environment. Beginner users can also easily learn a lot from others' configurations. This is also why more and more users are using NixOS for Linux desktop ricing on GitHub and reddit r/unixporn in recent years. The declarative configuration provides users with highly convenient system customization capabilities, allowing them to quickly switch various components of the system by changing a few lines of configuration. And so on. These are all selling points of NixOS, some of which can now also be achieved by traditional distributions with innovations like Fedora Silverblue. However, the system that can solve all these problems right now is only NixOS (and the more niche Guix. According toGuix’s README, it’s also based on the Nix package manager). ","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:5:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#what-sets-nixos-apart"},{"categories":["tech"],"content":" NixOS’s Disadvantages and Historical DebtsFor over two decades since the creation of the NixOS project, Nix package manager and the NixOS operating system have been very niche technologies, especially in China, where only a few Linux enthusiasts are aware of their existence, let alone using them. NixOS is very special and powerful, but on the other hand, it has a considerable amount of historical debt, such as: Poorly organized and impenetrable documentation The Flakes feature, which truly enables NixOS to meet its claimed reproducibility, is still in an experimental state from its official release in 2021(Nix 2.4) to 2024 now.. The Nix CLI is in a transition period, and the new version is much more elegant, but its implementation is strongly bound to the Flakes feature, making both difficult to stabilize and even hindering the development of many other features. Defects in the module system and insufficient error handling in Nix have led to long-term cryptic error messages, driving users crazy. The Nix language’s simplicity has resulted in a large number of Bash scripts being used in Nixpkgs, and most of Nix’s features are implemented in C++, making it a black box from the perspective of Nix. Many implementation details of NixOS are hidden in the Nixpkgs source code, such as the classification of software packages and what attributes can be overridden in derivations. Nixpkgs has long used folders to classify software packages, and there is no way to query the software packages by category except through the source code. All derivation-related information in Nixpkgs can currently only be obtained by looking at the source code. The maintainer of the https://nixos.wiki site has left, and the official has long failed to provide an alternative, making NixOS’s documentation even worse than it already was. The recent rapid growth of Nix/NixOS’s user base has posed challenges to its community operation model. … These historical debts are the main reasons why NixOS has not been more widely used. But these issues are also opportunities for NixOS’s future, as the community is actively working to solve them. I am looking forward to seeing how NixOS will develop once these issues are resolved. ","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:6:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#nixos-disadvantages"},{"categories":["tech"],"content":" The Future of NixOSNo one is interested in a technology that has no future, so what about the future of NixOS? Am I optimistic about it? Here, I try to illustrate my views on the future of NixOS using some data. First, let’s look at the Nixpkgs project, which stores all the software packages for NixOS and the implementation code for NixOS itself: The graph shows that the activity of the Nixpkgs project has been continuously increasing since 2021. Among the Top 6 contributors, three began contributing code in large quantities after 2021. If you look at GitHub, you’ll see that five out of the Top 10 contributors joined the community after 2021, including seasoned NixOS-CN members @NickCao and @figsoda. Now let’s look at the commit history of the Nix package manager, which is the underlying technology of NixOS: The graph shows a significant increase in activity in the Nix project in 2020, five of the top 6 contributors beginning to contribute code in large quantities after 2020. Next, let’s look at the Google Trends for the keyword “NixOS”: This graph shows several obvious upticks in the search trending for NixOS: In December 2021 This is likely due to the release of Nix 2.4 in November 2021, which brought experimental Flakes features and a new CLI. Flakes greatly improves the reproducibility of NixOS,and the new CLI is more in line with user intuition. In June 2023 The most important reason should be that several popular Linux-related channels on YouTube launched several videos about NixOS around this time. As of 2024-02-23, the three NixOS-related videos with the highest views on YouTube were all released between June and July 2023, with a total view count exceeding 1.3 million. Interest in China peaked recently, which may be because the user base in China has always been small. Then in June, I releasedNixOS and Flakes - An Unofficial Beginner’s Guide, and I did some promotion through channels likeTechnology Lover’s Weekly, leading to a significant increase in the relative index of NixOS. In January 2024 I’m not sure of the reason for this yet. Now let’s look at the annual user survey started by the Nix/NixOS community in 2022. 2022 Nix Survey Results, based on the data: 74.5% of users began using Nix/NixOS within the last three years. In the survey about extending Nixpkgs, 36.7% of users use Flakes to extend Nixpkgs, second only to traditional overlays. Nix Community Survey 2023 Results, a simple calculation reveals: 54.1% of users began using Nix/NixOS within the last three years. In the survey about extending Nixpkgs, the percentage of users using Flakes reached 49.2%, surpassing traditional Overlays. In the survey about experimental features, the percentage of users using Flakes reached 59.1%. Additionally, GitHub’sOctoverse 2023 report also mentioned Nixpkgs: Developers see benefits to combining packages and containerization. As we noted earlier, 4.3 million repositories used Docker in 2023. On the other side of the coin, Linux distribution NixOS/nixpkgs has been on the top list of open source projects by contributor for the last two years. These data points align with the increased activity in the Nixpkgs and Nix projects and show that the Nix/NixOS community began growing rapidly after 2021. Considering all these data points, I am very optimistic about the future of NixOS. ","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:7:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#the-future-of-nixos"},{"categories":["tech"],"content":" ConclusionFrom deciding to dive into NixOS to now, just 10 months later, the gains I’ve made on Linux far exceed those of the past three years. I have tried a lot of new technologies and tools on my PC, and my Homelab has become much richer (I now have more than ten NixOS hosts). My understanding of the Linux system structure has also deepened. These few points alone are enough to justify the choice, welcome to the world of NixOS! ","date":"2024-02-21","objectID":"/en/posts/my-experience-of-nixos/:8:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps"],"title":"OS as Code - My Experience of NixOS","uri":"/en/posts/my-experience-of-nixos/#conclusion"},{"categories":["tech","life"],"content":"I have dabbled with many niche technologies, and this year, the main ones I explored are NixOS, window manager i3/hyprland, and Neovim. NixOS, in particular, took me to a whole new level - I even created an open-source bilingual booknixos-and-flakes-book to help beginners get started. Additionally, I worked on several NixOS-related open-source projects like nix-darwin-kickstarter and ryan4yin/nix-config, which all received positive feedback. Based on my experiences with these niche technologies and the frequent questions I receive (e.g., why did I choose NixOS / Neovim /Flypy Chinese Input Method? What are their advantages? Can they really improve productivity?), I would like to briefly share my thoughts on them. ","date":"2023-08-01","objectID":"/en/posts/why-i-choose-niche-products/:0:0","series":[],"tags":["Vim","Neovim","VSCode","Editor","IDE","Linux","中文输入法"],"title":"Why do I explore these niche technologies?","uri":"/en/posts/why-i-choose-niche-products/#"},{"categories":["tech","life"],"content":" What are niche technologies?“Niche” refers to being different from the mainstream. Niche technologies are those with a relatively smaller user base within their respective domains. According to this definition, I can list some niche technologies I have encountered in different fields: Domain Niche Technologies Mainstream Technologies Text Editors Neovim, Emacs VSCode, Pycharm, IDEA Keyboard Layout Dvorak QWERTY Linux Distros NixOS, Gentoo, Arch Linux Ubuntu, Fedora Window Managers i3, hyprland KDE, GNOME Most people tend to choose mainstream technologies in these fields due to their lower learning curve and ease of use. I was once part of the majority, but I gradually discovered the advantages of niche technologies, which led me to try and eventually transition to them. ","date":"2023-08-01","objectID":"/en/posts/why-i-choose-niche-products/:1:0","series":[],"tags":["Vim","Neovim","VSCode","Editor","IDE","Linux","中文输入法"],"title":"Why do I explore these niche technologies?","uri":"/en/posts/why-i-choose-niche-products/#what-are-niche-technologies"},{"categories":["tech","life"],"content":" What are the characteristics of these niche technologies?Niche technologies obviously have some advantages to attract a portion of users and make them choose these technologies over mainstream ones. Based on my personal experience with these niche technologies, they share some notable common characteristics. Firstly, they have a common downside: higher learning curve and more time required to get familiar with them during the initial stages. This filters out the majority of users, and only those who enjoy tinkering and embracing challenges will be willing to explore these niche technologies. For instance, with the Dvorak keyboard layout, the learning curve is steep, requiring a significant amount of time to memorize the key arrangement and practice, leading to a challenging input experience in the early stages. To achieve the typing speed you had with the QWERTY keyboard layout, you might need to practice Dvorak for at least an hour a day consistently for a month. Now, let’s discuss their common advantages: High customizability: Users can freely customize various functions according to their needs. Strong sense of control and excellent user experience: The high level of customization gives users a sense of complete control while using these technologies, resulting in an excellent user experience. High user retention and active communities: Users continuously explore, learn, and customize these technologies, creating a strong sense of belonging within the communities. Due to these reasons, once users successfully familiarize themselves with a niche technology (e.g., dvorak keyboard layout, Neovim/Emacs editors), it becomes challenging for them to revert to the previous mainstream solutions. They will find the previous solutions less convenient and enjoyable. ","date":"2023-08-01","objectID":"/en/posts/why-i-choose-niche-products/:2:0","series":[],"tags":["Vim","Neovim","VSCode","Editor","IDE","Linux","中文输入法"],"title":"Why do I explore these niche technologies?","uri":"/en/posts/why-i-choose-niche-products/#what-are-the-characteristics-of-these-niche-technologies"},{"categories":["tech","life"],"content":" Why do I explore these niche technologies?I have explored various niche technologies, and curiosity is the primary reason. However, what makes me stick with them is their excellent user experience. For instance, with Neovim editor and Hyprland window manager, once configured, they are aesthetically pleasing! Moreover, Neovim is exceptionally fast, even too fast! This speed may not impress those VSCode / IDEA users who haven’t experienced Neovim before, but once you get used to it, you’ll find the speed truly impressive, just like the character Tu Hengyu exclaims in the The Wandering Earth 2 (550W is too fast! This speed is too fast!). Additionally, after mastering these technologies, I find them enjoyable to use. The keyboard-driven interaction provides a sense of control and smoothness(elegant, so elegant!). My NixOS + Hyprland Desktop My Neovim Editor Similarly, my love for NixOS is based on similar reasons. NixOS with its declarative, reproducible (consistent runtime environment), OS as Code features aligns perfectly with what an Site Reliablility Engineer like me desires. I couldn’t wait to use it and even wanted to improve it promptly to make it suitable for more scenarios. A few days ago, I saw a comment from a foreign netizen on 4chan (although the language was a bit extreme, I still somewhat agreed…): Completely and utterly unacceptable. Imagine having a tool that can’t even properly undo an operation and then relying on it to manage an operating system. apt, pip, pm, rpm, pacman, whatever are all a mad fucking joke. ","date":"2023-08-01","objectID":"/en/posts/why-i-choose-niche-products/:3:0","series":[],"tags":["Vim","Neovim","VSCode","Editor","IDE","Linux","中文输入法"],"title":"Why do I explore these niche technologies?","uri":"/en/posts/why-i-choose-niche-products/#why-do-i-explore-these-niche-technologies"},{"categories":["tech","life"],"content":" Can niche tools or technologies improve productivity?Many people claim that niche tools like Neovim editor, i3 window manager, can boost productivity, but I believe it is a misconception. In fact, many of these tools or technologies can be time-consuming distractions, driven by one’s interests to continuously explore their boundaries and adjust configurations to better suit individual needs. During the initial phase, the time invested in these endeavors often outweighs the saved time from increased productivity. So, ultimately, trying to use these technologies to significantly boost productivity is not realistic. They can improve your efficiency, but to a limited extent, unless your typing speed is the limiting factor in your productivity, emmm… Or some may argue that once you become completely proficient, vim/emacs makes it easier to enter a state of flow? That is also difficult to say. ","date":"2023-08-01","objectID":"/en/posts/why-i-choose-niche-products/:4:0","series":[],"tags":["Vim","Neovim","VSCode","Editor","IDE","Linux","中文输入法"],"title":"Why do I explore these niche technologies?","uri":"/en/posts/why-i-choose-niche-products/#can-niche-tools-or-technologies-improve-productivity"},{"categories":["tech","life"],"content":" So, what are the benefits of tinkering with these things?If we look at it from a purely pragmatic perspective, there may not be many benefits; it’s like playing games, just spending leisure time. Why do you always delve into these things that are useless for the business? (teasing tone) However, compared to doing something boring for leisure, there are some useful takeaways. For instance, when I encounter a bug in AstroNvim , I provide a PR to the upstream repository. When I find that NixOS documentation is inadequate, I write my own documentation and share it. If I notice that NixOS lacks support for a SBC I have, I might try to port it. And if I find that a certain tool lacks a feature I want, I might just write one myself. The experiences gained, open-source projects created, PRs left in upstream repositories, and the appreciation received in the community all feel valuable. It may not necessarily have business value, but it’s fun, and you get to make friends, help others, and leave your mark in the open-source community - isn’t that interesting? Linus, when he first created Linux, did itjust for fun. ","date":"2023-08-01","objectID":"/en/posts/why-i-choose-niche-products/:5:0","series":[],"tags":["Vim","Neovim","VSCode","Editor","IDE","Linux","中文输入法"],"title":"Why do I explore these niche technologies?","uri":"/en/posts/why-i-choose-niche-products/#so-what-are-the-benefits-of-tinkering-with-these-things"},{"categories":["tech","life"],"content":" ConclusionYou can’t connect the dots looking forward; you can only connect them looking backward. So you have to trust that the dots will somehow connect in your future. You have to trust in something — your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life. Stay Hungry. Stay Foolish. ——You’ve got to find what you love, by Steve Jobs, CEO of Apple Computer ","date":"2023-08-01","objectID":"/en/posts/why-i-choose-niche-products/:6:0","series":[],"tags":["Vim","Neovim","VSCode","Editor","IDE","Linux","中文输入法"],"title":"Why do I explore these niche technologies?","uri":"/en/posts/why-i-choose-niche-products/#conclusion"},{"categories":["tech"],"content":"Since the article is so long now, for the convenience of readers, the content of this post has been moved to a separate site: Document Site: https://nixos-and-flakes.thiscute.world/ GitHub Repo: https://github.com/ryan4yin/nixos-and-flakes-book Thanks for the feedback, criticism, suggestions fromReddit❤️ ","date":"2023-05-10","objectID":"/en/posts/nixos-and-flake-basics/:0:0","series":["NixOS \u0026 Nix Flakes"],"tags":["NixOS","Nix","Flakes","Linux","DevOps","Tutorial"],"title":"NixOS \u0026 Nix Flakes - A Guide for Beginners","uri":"/en/posts/nixos-and-flake-basics/#"},{"categories":["life","tech"],"content":" GossipAnother year has passed in the twinkling of an eye, and this New year, the global epidemic has set a new record. After Christmas, the daily increase in the United States has directly exceeded 1 million. In China, poor management in Xi’an has led to hunger. COVID-19 has been for more than two years. Back to the point, after leaving from W Company at the beginning of this year, I was very lucky to join the current company, Mobiuspace, and I was mixed in the process of integrating into Mobiuspace. However, I am quite satisfied with the overall results, the current work has been on the right track, but also found a lot of opportunities. ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:1:0","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#gossip"},{"categories":["life","tech"],"content":" Life In January, I set up this Blog, and I met @Cheese，@Cheese helped me adjust the style of the “Friends” page, thanks him very much~ In February, I fired my boss, and then what to say? I suddenly felt open-minded and changed my mindset 180 degrees. It was great, but I was actually very worried about my shortcomings in all aspects. Anyway, I’m in a complicated mood. I talked a lot with@是格子啊, @Cheese and former colleagues). Thank you very much for helping me sort out my thoughts and giving me an affirmation. At the same time, I was recommended by @Cheese and started using twitter. I climbed the mountain every day to see the scenery, bought a hammock to take a nap in the park, practiced the harmonica and bamboo flute, and played like this for a month. In March, I started looking for a job. After meeting with several companies, I was very lucky to enter Mobiuspace and became a new SRE. The experience of a year in Mobiuspace is written in the “work” section, which is skipped here. At the end of March, I watched the movie “Raya and The Last Dragon” (the only movie I watched in 2021), and the ending song was very good. In April, by various coincidences, I unexpectedly found that my junior high school classmate’s residence was less than one kilometer away from me. I had a meal of hometown food and bayberry wine at his house. It tasted very good! In August, my two cousin came to Shenzhen for a summer internship. I crossed Shenzhen’s east-west coastline with them. The scenery was great, but we were really hot and thirsty on the way. In October Joined Mobiuspace’s surfing team, surfing and have a seaside barbecue for the first time. Bought roller skates, learned reverse skating and step steering, and reviewed some basic skills learned in college. In December, Bought a YunMi RO Filterred Water Dispenser, and many kinds of tea. Currently I prefer to drink Black Tea, such as Dianhong - Yunnan Gold, Redsunion Keemun. YunMi RO Filterred Water Dispenser All kinds of tea In January 2022, I bought Anime PVC Figures for the first time. After putting these figures, I felt that my room was more youthful and colorful. Anime PVC Figures and Anime Figure Painting in my room ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:2:0","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#life"},{"categories":["life","tech"],"content":" Readings After resigning at the beginning of the year, I went sightseeing, and my mind was a little more calm. I read more than half of the book “From Lost to Found the Pacific Crest Trail”. In June, the community organized us to get vaccinated against COVID-19, I read the book“Youth Post Station - A Portrait of Working Girls in Shenzhen” in the waiting room, which is mainly about the lives of working girls in the 1980s and 1990s. The writing is very real and the feelings are very delicate. At the end of the year, my second grandfather died. After attending the funeral, I vaguely found some profound changes in my mind. I finished reading “Moon Palace”, which tells the tragic life of the protagonist. Most of the rest of my spare time, boring, do not want to learn anything, do not want to exercise, so I read a lot of web novels to pass the time. ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:3:0","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#readings"},{"categories":["life","tech"],"content":" MusicAfter resigning at the beginning of the year, I practiced the bamboo flute and the blues harmonica for some time, but then it was basically silent after I got a job. On the whole, I have made little progress this year. ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:4:0","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#music"},{"categories":["life","tech"],"content":" Working - The year I work in MobiuspaceWhen I first joined Mobiuspace in March, I was curious, but I was so cautious that I couldn’t believe I could get into such a great company. I felt like I was out of luck. After all, Mobiuspace, whether it is the level of colleagues or the working atmosphere, or the number of customers, compared with my last company is qualitatively different. My first station in Mobiuspace After getting familiar with the contents and methods of the work, leader tried his best to give me the work that best matched my interests, helping me solve problems, and at the same time giving me great autonomy, which was really great. However, a high degree of autonomy also brings higher difficulty in work. I have been in a hurry, confused, and even self-doubted when I encounter difficulties. I am worried about whether I will run away the next day. But fortunately, I still have the ability to adjust my mindset, take responsibility and finish the work step by step. When there were several delays in my work, leader accompanied me to work overtime. After the work was done, he took me to a big dinner to reward myself. I really thanked him for his help and support. My new station, near the floor-to-ceiling window, the view is great. Looking back at the summary and outlook for 2020, I find that the actual progress this year is very different from what I expected last year. The initial goal was only about 10% achieved, but because I was exposed to a lot of unexpected things, I was generally satisfied: It is a great gain to be familiar with the culture and working style of the new company - Mobiuspace, and my working style has been greatly improved. Contact and be familiar with Mobiuspace’s AWS online environment Responsible for maintaining the online Kubernetes management platform, the first time I came into contact with the online cluster peak QPS was tens of thousands. It is of great significance that I have changed from being careful at the beginning to becoming a veteran now. Using python to write several Kubernetes management platform services, this is also my first time to write online services, quite a sense of achievement In the second half of the year, I spent a lot of energy on the analysis and control of AWS cost, and got some good results, which benefited a lot. Learned the simple use of Nginx, just enough to maintain the company’s pre-existing Nginx proxy configuration. Lead the completion of “create a new K8s cluster and migrate the services to the new cluster”. Although it is not a very difficult thing, but this should be my greatest achievement in 2021. I also encountered all kinds of problems in the process of upgrading. When I first upgraded and migrated, I prepared for a long time and panicked. As a result, there was still something wrong with some of the services during the upgrade. I was really confused at that time. Casually wrote a few demo of Go, and made little progress. Learning the rust language for a week, quickly finished reading The Book, and rewrote avideo2chars in rust Learned the underlying principle of Linux container: cgroups/namespace technology, and implemented a demo with go/rust Learned various network interfaces and iptables of Linux Be familiar with PromQL/Grafana If I give myself a score, it’s “good”. Because I am not very enterprising, so the result can not be called “excellent”. By the way, the new office of Mobiuspace is really great. See my twitter for details： 新办公区真好呐～ 值此良辰美景，好想整个榻榻米坐垫，坐在角落的落地窗边工作🤣 那种使用公共设施工（mo）作（yu）的乐趣，以及平常工位见不到的景色交相辉映，是不太好表述的奇妙体验 pic.twitter.com/FASffzw8N3 — ryan4yin | 於清樂 (@ryan4yin) January 17, 2022 ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:5:0","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#working---the-year-i-work-in-mobiuspace"},{"categories":["life","tech"],"content":" A Sense of Technology Istio Service Mesh: Realize that it is a bit heavy, and its development does not necessarily match our needs The cost of the Sidecar model is relatively high, and without tuning, it will bring a 1/3 to 1/4 increase in the cost of the service, as well as a increase of delay. Thinking about whether to continue to invest in Istio or to switch to other options. Service Mesh is still evolving rapidly, and the future trend should be eBPF + Envoy + WASM. Cilium’s eBPF-based Service Mesh is a new trend (it falls back to Per-Node Proxy mode when using advanced features). It’s expected to hit other Service Mesh of Sidecar mode in terms of cost and delay. As for the log of K8s cluster, we currently use a self-developed system based on gelf protocol, but there are a lot of problems. From the point of view of improving the maintainability and ease of use of the log system, loki is worth exploring. In terms of K8s cluster management, I think the upgrade iteration of the cluster can be done more automatically and reliably. Next year, we can explore more in the direction of multi-cluster management. Pod Service Quality: For non-core services, the amount of requests resources can be appropriately reduced instead of fully reserved (Guaranteed) to improve resource utilization. The official HPA capability is not enough. Our developers needs to scale the services based on QPS/Queue or other parameters. We should continue to promote the landing ofKEDA. In terms of cost control, I realized the benefits of ARM architecture and AWS Spot EC2. There is a lot of potential room for optimization of cross-area traffic cost. AI has landed in various fields, affecting our daily use of voice navigation, song synthesis, speech synthesis and many other fields, including, of course, scenarios related to SRE work: AIOps ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:6:0","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#a-sense-of-technology"},{"categories":["life","tech"],"content":" Prospects of 2022","date":"2022-01-23","objectID":"/en/posts/2021-summary/:7:0","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#prospects-of-2022"},{"categories":["life","tech"],"content":" On the Side of TechnologyThe outlook for this year is more focused. I strive to achieve 50%, which will be a big breakthrough. Proficient in Go and use in at least two projects To forge iron, one must be strong. Coding is the foundation of IT. Learn kubebuilder, k8s source code. Network Technologies Service Mesh - Istio Network Proxy - Envoy/APISIX K8s Network Plugins: Cilium + eBPF Optimization of cost and Service Stability of AWS EKS. Save the cost of DataTransfer-Regional-Bytes. K8s new feature：Topology Aware Hints Istio:Locality Load Balancing Optimize the EC2 Instance Type： Use the more appropriate instance types Use Instance of ARM architecture, to reduce cost and increase efficiency Popularize gRPC protocol Get through the local development environment and the running environment on the cloud nocalhost Multicluster Application Deployment and Disaster Recovery karmada Explore new technologies and other possibilities（Low priority） Kubernetes-based Service platform, Future Development Direction kubevela buildpack should I promote GitOps openkruise Development of Serverless platform Knative OpenFunction Machine learning / Deep learning: I would like to try to apply AI to music, voice, SRE and other areas I am interested in… It can be expected that there will be so many opportunities for the SRE team in 2022. I really look forward to which parts I can be responsible for and what results I can achieve. ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:7:1","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#on-the-side-of-technology"},{"categories":["life","tech"],"content":" On the Side of Life Sports: Practice roller skating well and learn some tricks, at least twice a month. Make more than three short trips Music Learn music theory again… Practice MIDI Keyboard. Learn Synthesizer V Stduio Pro + Qingsu AI. Cover some of my favorite songs. Reading: The list is as follows. Read at least one of them in a month. Literature No Longer Human, Osamu Dazai The End of Your Life Book club, Will Schwalbe One Hundred Years of Solitude, Gabriel Garcia Marquez Love in the Time of Cholera, Gabriel Garcia Marquez Sophie’s World Stories of Your Life and Others, Ted Chiang 《沈从文的后半生》 《我与地坛》 《将饮茶》 《My Country and My People - 林语堂》 《房思琪的初恋乐园》 social \u0026 sciences Death Is But a Dream: I want to know more about “death” this year. 《怎样征服美丽少女》：哈哈 Harper Perennial Modern Classics Social Psychology The Courage to Be Disliked The Body: A Guide for Occupants The Structure of Scientific Revolutions Deng Xiaoping and the Transformation of China On China 《刘擎西方现代思想讲义》 The Order of Time The Universe in Your Hand 《圆圈正义-作为自由前提的信念》 What Do You Say After You Say Hello? Technology Complexity: A Guided Tour Site Reliability Engineering: How Google Runs Production Systems The Phoenix Project - A Novel About IT, DevOps, and Helping Your Business Win The Mythical Man Month and Other Essays on Software Engineering 《绩效使能：超越 OKR》 Powerful: Building a Culture of Freedom and Responsibility 《幕后产品-打造突破式思维》 Professional Linux Kernel Architecture The Linux Programming Interface: A Linux and UNIX System Programming Handbook Refactoring - Improving the Design of Existing Code How Networks Work ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:7:2","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#on-the-side-of-life"},{"categories":["life","tech"],"content":" In SummaryAt the beginning of 2021, my friend and I gave myself the expectation of「拆破玉笼飞彩凤， 顿开金锁走蛟龙」, which felt that it had really come true. This year, I hope to be able to “Going up one more storey” both in life and at work. ","date":"2022-01-23","objectID":"/en/posts/2021-summary/:8:0","series":null,"tags":["Summary"],"title":"Summary of My 2021","uri":"/en/posts/2021-summary/#in-summary"},{"categories":null,"content":" 🌱 I’m currently learning Mindfulness expert Jon Kabat-Zinn teaches you how to incorporate meditation into your everyday life to improve your health and happiness. After being diagnosed with ADHD, my doctor advised me to practice mindfulness meditation. How to Think Straight About Psychology, 11th Edition Complexity: A Guideed Tour Set Boundaries, Find Peace: A Guide to Reclaiming Yourself The Great Gatsby CS-EE Linux Device Drivers Development 2nd Edition TCP/IP Illustrated, Volume 1, 2nd Edition The Linux Programming Interface Practical Electronics for Inventors, Fourth Edition Digital Design and Computer Architecture RISC-V Edition ","date":"2021-02-01","objectID":"/en/now/:1:0","series":null,"tags":null,"title":"Now","uri":"/en/now/#-im-currently-learning"},{"categories":null,"content":" 🤤 I want to learn Programming Languages: Rust, C, C++ Network: L3/L4/L7 Computer Networking - A Top-Down Approach, 7e AI Dive into Deep Learning Music:SynthesizerV/ACE +Reaper Modeling \u0026 Design: Blender, Unreal Engine 5 ","date":"2021-02-01","objectID":"/en/now/:2:0","series":null,"tags":null,"title":"Now","uri":"/en/now/#-i-want-to-learn"},{"categories":null,"content":" The articles on this site may be written in Chinese orEnglish, some of them may be bilingual, and some of them are only available in Chinese orEnglish. Please read them as needed. 本站的文章可能以中文或英文两种语言书写，其中部分文章可能是双语，也有部分文章只有中文或者英文版本，请读者按需阅读。 ","date":"2021-01-16","objectID":"/en/about/:0:0","series":null,"tags":null,"title":"About","uri":"/en/about/#"},{"categories":null,"content":" About Me There’s a lot of despair, but also the odd moment of beauty, where time is no longer the same. – The Elegance of the Hedgehog by Barbery, Muriel Anderson Nickname: ryan4yin, ryan_yin Gender: Him/He Music: I like listening to Post-rock, Bluegrass, Folk and Instrumental Music. I’m learning Bamboo Flute, Harmonica,SynthesizerV/ACE \u0026 Reaper on and off. Sports: I like Roller Skating and Swimming, VR games “Beat Saber” and“Pistol Whip” Books: The serious books I read most are IT technical books. In addition, I also like to read science fiction and web novels / light novels that I can’t quit. Movies/TV: What I watch most are anime, and in addition, science fiction films and tender films. Major: Major in Acoustics, but I didn’t learn it very well… Languages English: Good at reading technical articles, but weak in writing, listening and speaking. Chinese: My native language. Programming Languages Python/Go: Currently my mainstays, and also the languages I’m most familiar with. Rust: Learning, it features a lot of functional syntactic sugar and helpful compiler prompts. It feels very powerful to use (although it can be a bit demanding as well…). C: Mainly used to write embedded programs \u0026 learn Linux system programming. The languages I have used but have been abandoned: Java/Julia/Mathematica/Lua Technologies of Interest: Linux: I’m an enthusiast for Linux, and I earn my livelihood through it. The distribution I like the most and have invested the most effort into is NixOS. Neovim: My primary text editor and my personal favorite. It provides me with a smooth input experience akin to stenography input methods, making it hard for me to put down. Window Manager: I use both i3 and hyprland as window managers. Similar to Neovim, they allow me to perform most operations without leaving the keyboard, resulting in a very fluid experience. Embedded: Referring to embedded systems, I find the realm of hardware to be intriguing. In my free time, I’ve dabbled quite a bit and invested a fair amount of money in this field. Kubernetes: One of the cornerstones of SRE (Site Reliability Engineering), a foundation of cloud-native technologies. Istio: Among the most mature service mesh products, and also a crucial part of my professional toolkit. Experience: Site Reliability Engineer Maintain and optimize cloud computing platform and cloud networking, analyze and control cloud computing costs(AWS/GCP/…), to support the fast-growing business stably and efficiently. Contact Me Email: bXkgZW1haWw6IHJ5YW40eWluQGxpbnV4LmNvbQ== Twitter: https://twitter.com/ryan4yin Github: https://github.com/ryan4yin/thiscute.world/issues ","date":"2021-01-16","objectID":"/en/about/:1:0","series":null,"tags":null,"title":"About","uri":"/en/about/#about-me"},{"categories":null,"content":" About This Blog “For me, blog is first of all a knowledge management tool, followed by a communication tool. My technical articles are mainly used to sort out the knowledge I don’t understand yet. I only write about things that I haven’t fully mastered yet. As for the things I am proficient in, I usually have no incentive to write related articles. Showing off has never been my motivation to write. Curiosity is.” ──阮一峰 I started writing blogs in 2016, and it’s been many years now. I’ve experimented with various writing platforms, but ultimately, I chose to create my own website. This choice grants me full control and the highest degree of freedom. My articles won’t be deleted or blocked without reason. Additionally, there are many free static site hosting services available (such as GitHub Pages, Vercel, etc.), which essentially require no monetary investment. Whether it’s a lifestyle blog or a technical blog, every blogger has their own objectives. My purpose for blogging has changed many times. Initially, I simply wanted to try out new things. Later, I aimed to gain more readership and comments because they provided a strong sense of accomplishment. Subsequently, I used my blog as a technical notebook and diary, jotting down numerous miscellaneous thoughts. Now, my primary goal for blogging is to use it as a tool to organize and construct my knowledge framework. My blog, along with my personal notes repository ryan4yin/knowledge, serves as my treasure trove of knowledge. As I continually add new content, I find myself increasingly reliant on it for my daily work and even leisure activities. My secondary objective is to share the knowledge I acquire with those who need it, embracing the joy of helping others. Lastly, I use blogging to document myself—my joys, sorrows, and personal growth. I’ve purchased domain names for the longest duration of ten years, and renewing them every few years. I hope this blog will accompany me for a very long time. Looking back at my blog in the next decade and reflecting on the path I’ve walked over these ten years, I believe that time will hold special significance. Blog Timeline 2021-01-16: Set up the blog https://ryan4yin.space/ 2022-01-23: Add English Version https://ryan4yin.space/en/ 2022-02-07: switch domain to https://thiscute.world/, add a backup domainhttps://writefor.fun The Internet is vast, and this website is in a corner. If it is lucky enough to be found by you, and its content are also helpful to you, that would be great! Thank you for reading~ ","date":"2021-01-16","objectID":"/en/about/:2:0","series":null,"tags":null,"title":"About","uri":"/en/about/#about-this-blog"},{"categories":null,"content":" Mottos I’ve EmbracedThese mottos have accompanied me through the seasons, accompanying this blog, and have given me strength during various periods. They evoke a sense of nostalgia whenever I encounter them. Here, I present them to all of you readers, hoping they may also empower you! 2021-02-06 ~ 2022-01-03 Breaking the jade cage, a colorful phoenix soars; unlocking the golden lock, a dragon roams free. — From my friend @二牛 (Er Niu) 2021-01-16 - 2022-04-04 With palms together and eyes closed, letting go of everything in your mind, your lips will naturally curl upwards, laughter will ring out, praising happiness~ 2022-04-04 ~ 2022-08-19 I missed the flowers, but saw the sea. 2021-01-18 ~ 2022-08-19 There’s a lot of despair, but also the odd moment of beauty, where time is no longer the same. - “The Elegance of the Hedgehog by Barbery, Muriel Anderson” 2022-08-19 ~ now Though there are countless waters and mountains ahead, the traveler will surely arrive. — “At the Bend of the Xiajiang - Notes on Chen Xingjia’s Life” ","date":"2021-01-16","objectID":"/en/about/:2:1","series":null,"tags":null,"title":"About","uri":"/en/about/#mottos-ive-embraced"},{"categories":null,"content":" NOTICEThe content in this blog is only my opinion, I can only try to reduce errors and omissions, but can not guarantee the correctness of the content! So please look at anything in this blog critically. In addition, many of the pictures/banners used on this site are from the Internet. If there is any infringement, please contact me to delete it. ","date":"2021-01-16","objectID":"/en/about/:2:2","series":null,"tags":null,"title":"About","uri":"/en/about/#notice"},{"categories":["life"],"content":" Ah, there are still ten days to get rid of the city and return to that reassuring mountain forest, waiting and anxious, wondering why the remaining ten days are so difficult. The final review is a mess again. I am really lazy… It is so unrealistic for me to have such a big dream that I have finished thousands of lines of code. I kind of want to accept my fate. After one o’clock in the middle of the night, I was still not used to the air conditioner in the bedroom, but the cool breeze on the aisle balcony is very comfortable, and the serenity of the city now also has a bit of charm. But anyway, I really want to go home. ","date":"2017-06-27","objectID":"/en/posts/the-end-of-another-semester/:0:0","series":null,"tags":[],"title":"The End of Another Semester","uri":"/en/posts/the-end-of-another-semester/#"}]