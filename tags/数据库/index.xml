<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>数据库 - 标签 - This Cute World</title><link>https://thiscute.world/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><description>数据库 - 标签 - This Cute World</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 07 Aug 2022 04:11:23 +0800</lastBuildDate><atom:link href="https://thiscute.world/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/" rel="self" type="application/rss+xml"/><item><title>分布式数据库的一致性问题与共识算法</title><link>https://thiscute.world/posts/consistency-and-consensus-algorithm/</link><pubDate>Sun, 07 Aug 2022 04:11:23 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin</uri></author><guid>https://thiscute.world/posts/consistency-and-consensus-algorithm/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/consistency-and-consensus-algorithm/featured-image.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，不保证正确！</p>

</blockquote><p>谈到分布式数据库，不论是 Etcd/Zookeeper 这样的中心化分布式数据库，还是 Ethereum 区块链这样的去中心化数据库，都避免不了两个关键词：「<strong>一致性</strong>」跟「<strong>共识</strong>」。</p>]]></description></item><item><title>SQLAlchemy 学习笔记（三）：ORM 中的关系构建</title><link>https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/</link><pubDate>Tue, 21 May 2019 22:19:00 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin</uri></author><guid>https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sqlalchemy-notes-3-relationship-and-foreignkey/sqlalchemy-relationships.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，不保证正确。</p>

</blockquote><h2 id="一关系构建foreignkey-与-relationship" class="headerLink">
    <a href="#%e4%b8%80%e5%85%b3%e7%b3%bb%e6%9e%84%e5%bb%baforeignkey-%e4%b8%8e-relationship" class="header-mark"></a>一、关系构建：<code>ForeignKey</code> 与 <code>relationship</code></h2><p>关系构建的重点，在于搞清楚这两个函数的用法。<code>ForeignKey</code> 的用法已经在<a href="https://www.cnblogs.com/kirito-c/p/10269485.html#%E8%A1%A8%E5%AE%9A%E4%B9%89%E4%B8%AD%E7%9A%84%E7%BA%A6%E6%9D%9F" target="_blank" rel="noopener noreferrer">SQL表达式语言 - 表定义中的约束</a>
讲过了。主要是 <code>ondelete</code> 和 <code>onupdate</code> 两个参数的用法。</p>]]></description></item><item><title>SQLAlchemy 学习笔记（二）：ORM 基础</title><link>https://thiscute.world/posts/sqlalchemy-notes-2-orm-basics/</link><pubDate>Mon, 11 Feb 2019 19:52:00 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin</uri></author><guid>https://thiscute.world/posts/sqlalchemy-notes-2-orm-basics/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sqlalchemy-notes-2-orm-basics/sqlalchemy-models.webp" referrerpolicy="no-referrer">
            </div><p>照例先看层次图</p>
<figure><img src="/images/sqlalchemy-notes/sqlalchemy-arch.webp"><figcaption>
      <h4>SQLAlchemy 层次结构</h4>
    </figcaption>
</figure>

<h3 id="一声明映射关系" class="headerLink">
    <a href="#%e4%b8%80%e5%a3%b0%e6%98%8e%e6%98%a0%e5%b0%84%e5%85%b3%e7%b3%bb" class="header-mark"></a>一、声明映射关系</h3><p>使用 ORM 时，我们首先需要定义要操作的表（通过 <code>Table</code>），然后再定义该表对应的 Python
class，并声明两者之间的映射关系（通过 <code>Mapper</code>）。</p>]]></description></item><item><title>SQLAlchemy 学习笔记（一）：Engine 与 SQL 表达式语言</title><link>https://thiscute.world/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/</link><pubDate>Mon, 21 Jan 2019 14:02:00 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin</uri></author><guid>https://thiscute.world/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/sqlalchemy-intro.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，如有错误烦请指正。</p>

</blockquote><p>SQLAlchemy 是一个用 Python 实现的 ORM （Object Relational Mapping）框架，它由多个组件构成，这些组件可以单独使用，也能独立使用。它的组件层次结构如下：</p>]]></description></item><item><title>SQL 基础笔记（三）约束</title><link>https://thiscute.world/posts/sql-basics-3-restrict/</link><pubDate>Sun, 20 Jan 2019 21:08:46 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin</uri></author><guid>https://thiscute.world/posts/sql-basics-3-restrict/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sql-basics-3-restrict/sql.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记不保证正确。</p>

</blockquote><p>数据类型是限制我们可以在表里存储什么数据的一种方法。不过，对于许多应用来说， 这种限制实在是太粗糙了。比如，一个包含产品价格的字段应该只接受正数。 但是没有哪种标准数据类型只接受正数。 另外一个问题是你可能需要根据其它字段或者其它行的数据来约束字段数据。比如， 在一个包含产品信息的表中，每个产品编号都应该只有一行。</p>]]></description></item><item><title>SQL 基础笔记（二）进阶查询</title><link>https://thiscute.world/posts/sql-basics-2-queries/</link><pubDate>Sun, 17 Jun 2018 14:17:46 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin</uri></author><guid>https://thiscute.world/posts/sql-basics-2-queries/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sql-basics-2-queries/sql.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>本笔记整理自<a href="https://book.douban.com/subject/24841239/" target="_blank" rel="noopener noreferrer">《SQL 基础教程》</a>、<a href="https://book.douban.com/subject/3354490/" target="_blank" rel="noopener noreferrer">《MySQL 必知必会》</a>和网上资料。个人笔记不保证正确。</p>

</blockquote><h2 id="一复杂查询" class="headerLink">
    <a href="#%e4%b8%80%e5%a4%8d%e6%9d%82%e6%9f%a5%e8%af%a2" class="header-mark"></a>一、复杂查询</h2><h3 id="视图" class="headerLink">
    <a href="#%e8%a7%86%e5%9b%be" class="header-mark"></a>视图</h3><p>将 SELECT 查询包装成一个虚拟表，该虚拟表就被称为视图。（因为只是一个包装，因此视图的数据也会随着原表的更新而更新）</p>]]></description></item><item><title>SQL 基础笔记（一）</title><link>https://thiscute.world/posts/sql-basics-1/</link><pubDate>Fri, 15 Jun 2018 16:27:46 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin</uri></author><guid>https://thiscute.world/posts/sql-basics-1/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sql-basics-1/sql.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>本笔记整理自<a href="https://book.douban.com/subject/24841239/" target="_blank" rel="noopener noreferrer">《SQL 基础教程》</a>、<a href="https://book.douban.com/subject/3354490/" target="_blank" rel="noopener noreferrer">《MySQL 必知必会》</a>和网上资料。个人笔记不保证正确。</p>

</blockquote><h2 id="一基础" class="headerLink">
    <a href="#%e4%b8%80%e5%9f%ba%e7%a1%80" class="header-mark"></a>一、基础</h2><p>SQL，即结构化查询语言，是为访问与操作关系数据库中的数据而设计的语言。</p>
<ol>
<li>关系数据库以行(row)为单位读写数据</li>
<li>SQL 根据功能的不同，可分为三类（其中DML用得最多，增删查改嘛）
<ol>
<li>DDL(Data Definition Language, 数据定义语言): CREATE/DROP/ALTER</li>
<li>DML(Data Manipulation Language, 数据操作语言): SELECT/INSERT/UPDATE/DELETE</li>
<li>DCL(Data Control Language, 数据控制语言): COMMIT/ROLLBACK/GRANT/REVOKE</li>
</ol>
</li>
<li>SQL 语句要以分号结尾。换行在 SQL 中不表示结束，而等同于空格。</li>
<li>SQL 不区分**关键字(Keyword)**的大小写，但是描述符就不一定了。
<ul>
<li>这里有个坑：MySQL 中，数据库和表其实就是数据目录下的目录和文件，因而，<strong>操作系统的敏感性决定数据库名和表名 是否大小写敏感</strong>。这就意味着<strong>数据库名</strong>和<strong>表名</strong>在 Windows
中是大小写不敏感的，而在大多数类型的 Unix/Linux 系统中是大小写敏感的。（注意仅指数据库名和表名）可通过修改配置文件的<code>lower_case_table_names</code>属性来统一这一行为。</li>
<li>而<strong>字段名</strong>、<strong>字段内容</strong>都是内部数据，是操作系统无关的。它们的大小写敏感性，由
MySQL 的的校对（COLLATE）规则来控制。该规则体现在 MySQL 的 校对字符集（COLLATION）的后缀上：比如 utf8字符集，<code>utf8_general_ci</code>表示不区分大小写，这个是 utf8 字符集默认的校对规则；<code>utf8_general_cs</code> 表示区分大小写，<code>utf8_bin</code> 表示二进制比较，同样也区分大小写 。</li>
</ul>
</li>
<li>SQL 中的字符串和日期需要用单引号引用起来，日期有特定格式<code>年-月-日</code></li>
</ol>
<p>修改字符集：<code>set names &lt;字符集名&gt;</code> 记住在 MySQL 中，utf-8mb4 才是完全的 utf-8字符集。</p>]]></description></item></channel></rss>