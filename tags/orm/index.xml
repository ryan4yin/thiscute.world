<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ORM on This Cute World</title><link>https://thiscute.world/tags/orm/</link><description>Recent content in ORM on This Cute World</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Tue, 21 May 2019 22:19:00 +0800</lastBuildDate><atom:link href="https://thiscute.world/tags/orm/index.xml" rel="self" type="application/rss+xml"/><item><title>SQLAlchemy 学习笔记（三）：ORM 中的关系构建</title><link>https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/</link><pubDate>Tue, 21 May 2019 22:19:00 +0800</pubDate><guid>https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;个人笔记，不保证正确。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id="一关系构建foreignkey-与-relationship" class="headerLink"&gt;
 &lt;a href="#%e4%b8%80%e5%85%b3%e7%b3%bb%e6%9e%84%e5%bb%baforeignkey-%e4%b8%8e-relationship" class="header-mark"&gt;&lt;/a&gt;一、关系构建：&lt;code&gt;ForeignKey&lt;/code&gt; 与 &lt;code&gt;relationship&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;关系构建的重点，在于搞清楚这两个函数的用法。&lt;code&gt;ForeignKey&lt;/code&gt; 的用法已经在&lt;a href="https://www.cnblogs.com/kirito-c/p/10269485.html#%E8%A1%A8%E5%AE%9A%E4%B9%89%E4%B8%AD%E7%9A%84%E7%BA%A6%E6%9D%9F" target="_blank" rel="noopener noreferrer"&gt;SQL表达式语言 - 表定义中的约束&lt;/a&gt;
讲过了。主要是 &lt;code&gt;ondelete&lt;/code&gt; 和 &lt;code&gt;onupdate&lt;/code&gt; 两个参数的用法。&lt;/p&gt;</description></item><item><title>SQLAlchemy 学习笔记（二）：ORM 基础</title><link>https://thiscute.world/posts/sqlalchemy-notes-2-orm-basics/</link><pubDate>Mon, 11 Feb 2019 19:52:00 +0800</pubDate><guid>https://thiscute.world/posts/sqlalchemy-notes-2-orm-basics/</guid><description>&lt;p&gt;照例先看层次图&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://thiscute.world/images/sqlalchemy-notes/sqlalchemy-arch.webp"&gt;&lt;figcaption&gt;
 &lt;h4&gt;SQLAlchemy 层次结构&lt;/h4&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="一声明映射关系" class="headerLink"&gt;
 &lt;a href="#%e4%b8%80%e5%a3%b0%e6%98%8e%e6%98%a0%e5%b0%84%e5%85%b3%e7%b3%bb" class="header-mark"&gt;&lt;/a&gt;一、声明映射关系&lt;/h3&gt;&lt;p&gt;使用 ORM 时，我们首先需要定义要操作的表（通过 &lt;code&gt;Table&lt;/code&gt;），然后再定义该表对应的 Python
class，并声明两者之间的映射关系（通过 &lt;code&gt;Mapper&lt;/code&gt;）。&lt;/p&gt;</description></item><item><title>SQLAlchemy 学习笔记（一）：Engine 与 SQL 表达式语言</title><link>https://thiscute.world/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/</link><pubDate>Mon, 21 Jan 2019 14:02:00 +0800</pubDate><guid>https://thiscute.world/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;个人笔记，如有错误烦请指正。&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;SQLAlchemy 是一个用 Python 实现的 ORM （Object Relational Mapping）框架，它由多个组件构成，这些组件可以单独使用，也能独立使用。它的组件层次结构如下：&lt;/p&gt;</description></item></channel></rss>