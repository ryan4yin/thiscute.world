<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>写给开发人员的实用密码学 on This Cute World</title><link>https://thiscute.world/series/%E5%86%99%E7%BB%99%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E7%9A%84%E5%AE%9E%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/</link><description>Recent content in 写给开发人员的实用密码学 on This Cute World</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Tue, 20 Feb 2024 11:39:30 +0800</lastBuildDate><atom:link href="https://thiscute.world/series/%E5%86%99%E7%BB%99%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E7%9A%84%E5%AE%9E%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>个人数据安全不完全指南</title><link>https://thiscute.world/posts/an-incomplete-guide-to-data-security/</link><pubDate>Tue, 30 Jan 2024 13:48:30 +0800</pubDate><guid>https://thiscute.world/posts/an-incomplete-guide-to-data-security/</guid><description>&lt;h2 id="零前言" class="headerLink"&gt;
 &lt;a href="#%e9%9b%b6%e5%89%8d%e8%a8%80" class="header-mark"&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;p&gt;在接触电脑以来很长的一段时间里，我都没怎么在意自己的数据安全。比如说：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;长期使用一个没有 passphrase 保护的 SSH 密钥（RSA 2048 位），为了方便我还把它存到了
onedrive 里，而且在各种需要访问 GitHub/Gitee 或 SSH 权限的虚拟机跟 PC 上传来传去。&lt;/li&gt;
&lt;li&gt;Homelab 跟桌面 PC 都从来没开过全盘加密。&lt;/li&gt;
&lt;li&gt;在 2022 年我的 Homelab 坏掉了两块国产固态硬盘（阿斯加特跟光威弈 Pro 各一根），都是系统一启动就挂，没法手动磁盘格式化，走售后直接被京东换货了。因为我的数据是明文存储的，这很可能导致我的个人数据泄露&amp;hellip;&lt;/li&gt;
&lt;li&gt;几个密码在各种站点上重复使用，其中重要账号的随机密码还是我在十多年前用 lastpass 生成的，到处用了这么多年，很难说这些密码有没有泄露（lastpass 近几年爆出的泄漏事故就不少&amp;hellip;）&lt;/li&gt;
&lt;li&gt;GitHub, Google, Jetbrains 等账号的 Backup Code 被我明文存储到了百度云盘，中间发现百度云盘安全性太差又转存到了 OneDrive，但一直是明文存储，从来没加过密。&lt;/li&gt;
&lt;li&gt;一些银行账号之类的随机密码，因为担心遗忘，长期被我保存在一份印象笔记的笔记里，也是明文存储，仅做了些简单的内容替换，要猜出真正的密码感觉并不是很难。&lt;/li&gt;
&lt;li&gt;以前也有过因为对 Git 操作不熟悉或者粗心大意，在公开仓库中提交了一些包含敏感信息的
commit，比如说 SSH 密钥、密码等等，有的甚至很长时间都没发现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在在 IT 行业工作了几年，从我当下的经验来看，企业后台的管理员如果真有兴趣，查看用户的数据真的是很简单的一件事，至少国内大部分公司的用户数据，都不会做非常严格的数据加密与权限管控。就算真有加密，那也很少是用户级别的，对运维人员或开发人员而言这些数据仍旧与未加密无异。对系统做比较大的迭代时，把小部分用户数据导入到测试环境进行测试也是挺常见的做法&amp;hellip;&lt;/p&gt;</description></item><item><title>Kubernetes 中的证书管理工具 - cert-manager</title><link>https://thiscute.world/posts/kubernetes-cert-management/</link><pubDate>Sun, 31 Jul 2022 15:11:46 +0800</pubDate><guid>https://thiscute.world/posts/kubernetes-cert-management/</guid><description>&lt;p&gt;我在之前的文章&lt;a href="https://thiscute.world/posts/about-tls-cert/" target="_blank" rel="noopener noreferrer"&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;
中，介绍了如何使用 openssl 生成与管理各种用途的数字证书，也简单介绍了如何通过 certbot 等工具与 ACME 证书申请与管理协议，进行数字证书的申请与自动更新（autorenew）。&lt;/p&gt;</description></item><item><title>写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</title><link>https://thiscute.world/posts/about-tls-cert/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0800</pubDate><guid>https://thiscute.world/posts/about-tls-cert/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;本文大致是一篇原创文章，但是参考了许多网络资料，都列在文末的「参考」中了。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id="更新记录" class="headerLink"&gt;
 &lt;a href="#%e6%9b%b4%e6%96%b0%e8%ae%b0%e5%bd%95" class="header-mark"&gt;&lt;/a&gt;更新记录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2021-01-17&lt;/strong&gt;: 完成 TLS 协议简介、数字证书介绍、数字证书的申请或生成方法、mTLS 介绍、TLS 协议的破解手段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2022-03-13&lt;/strong&gt; ~ &lt;strong&gt;2022-03-14&lt;/strong&gt;: 重新整理补充，改写为《写给开发人员的实用密码学（八）——
数字证书与 TLS 协议》，整合进我的实用密码学系列文章中
&lt;ul&gt;
&lt;li&gt;补充 PKI 公钥基础架构及 X509 证书标准介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TODO:
&lt;ul&gt;
&lt;li&gt;补充 ALPN 应用层协议协商的介绍&lt;/li&gt;
&lt;li&gt;补充 TLS 协议的逆向手段&lt;/li&gt;
&lt;li&gt;基于&lt;a href="https://shoujo.ink/2021/11/cfssl-%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90/" target="_blank" rel="noopener noreferrer"&gt;cfssl&lt;/a&gt;
详细介绍 PKI 的各项组件&lt;/li&gt;
&lt;li&gt;基于 PKI 的应用服务间身份识别技术：&lt;a href="https://github.com/spiffe/spiffe" target="_blank" rel="noopener noreferrer"&gt;SPIFF ID&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;SPIFF ID 是云原生领域的标准，&lt;a href="https://shoujo.ink/2021/10/istio-%E5%AE%89%E5%85%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B-pki-%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/" target="_blank" rel="noopener noreferrer"&gt;服务网格项目 Istio 就使用了 SPIFF ID 作为安全命名&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="preface" class="headerLink"&gt;
 &lt;a href="#preface" class="header-mark"&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;p&gt;现代人的日常生活中，HTTPS 协议几乎无处不在，我们每天浏览网页时、用手机刷京东淘宝时、甚至每天秀自己绿色的健康码时，都在使用 HTTPS 协议。&lt;/p&gt;</description></item><item><title>写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</title><link>https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/</link><pubDate>Wed, 09 Mar 2022 20:50:00 +0800</pubDate><guid>https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;本文部分内容翻译自 &lt;a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreferrer"&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者补充了密码学历史以及 openssl 命令示例，并重写了 RSA/ECC 算法原理、代码示例等内容。&lt;/p&gt;</description></item><item><title>写给开发人员的实用密码学（六）—— 对称密钥加密算法</title><link>https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/</link><pubDate>Sun, 06 Mar 2022 18:44:00 +0800</pubDate><guid>https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;本文主要翻译自 &lt;a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreferrer"&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者补充了部分代码示例。&lt;/p&gt;</description></item><item><title>写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</title><link>https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/</link><pubDate>Tue, 01 Mar 2022 17:15:05 +0800</pubDate><guid>https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;本文主要翻译自 &lt;a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreferrer"&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者额外补充了
DHKE/ECDH 的代码示例，以及「PFS 完美前向保密协议 DHE/ECDHE」一节。&lt;/p&gt;</description></item><item><title>写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</title><link>https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/</link><pubDate>Tue, 01 Mar 2022 17:15:04 +0800</pubDate><guid>https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;本文主要翻译自 &lt;a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreferrer"&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id="一前言" class="headerLink"&gt;
 &lt;a href="#%e4%b8%80%e5%89%8d%e8%a8%80" class="header-mark"&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;在密码学中，随机性（熵）扮演了一个非常重要的角色，许多密码学算法都要求使用一个不可预测的随机数，只有在生成的随机数不可预测时，这些算法才能保证其安全性。&lt;/p&gt;
&lt;p&gt;比如 MAC 算法中的 key 就必须是一个不可预测的值，在这个条件下 MAC 值才是不可伪造的。&lt;/p&gt;
&lt;p&gt;另外许多的高性能算法如快速排序、布隆过滤器、蒙特卡洛方法等，都依赖于随机性，如果随机性可以被预测，或者能够找到特定的输入值使这些算法变得特别慢，那黑客就能借此对服务进行 DDoS 攻击，
以很小的成本达到让服务不可用的目的。&lt;/p&gt;</description></item><item><title>写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</title><link>https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/</link><pubDate>Tue, 01 Mar 2022 17:15:03 +0800</pubDate><guid>https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;本文主要翻译自 &lt;a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreferrer"&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者补充了 HMAC
的 Python 实现以及 scrypt 使用示例。&lt;/p&gt;</description></item><item><title>写给开发人员的实用密码学（二）—— 哈希函数</title><link>https://thiscute.world/posts/practical-cryptography-basics-2-hash/</link><pubDate>Tue, 01 Mar 2022 17:15:01 +0800</pubDate><guid>https://thiscute.world/posts/practical-cryptography-basics-2-hash/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;本文主要翻译自 &lt;a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreferrer"&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者额外补充了「非加密哈希函数」的简单介绍。&lt;/p&gt;</description></item><item><title>写给开发人员的实用密码学（一）—— 概览</title><link>https://thiscute.world/posts/practical-cryptography-basics-1/</link><pubDate>Tue, 01 Mar 2022 17:15:00 +0800</pubDate><guid>https://thiscute.world/posts/practical-cryptography-basics-1/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;本文主要翻译自 &lt;a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreferrer"&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id="零前言" class="headerLink"&gt;
 &lt;a href="#%e9%9b%b6%e5%89%8d%e8%a8%80" class="header-mark"&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;p&gt;你是软件开发人员吗？有时你会需要在日常工作中使用哈希、加密或数字签名等密码学工具吗？你认为密码学很复杂，充满了数学知识，而且只适合书呆子吗？不，不是这样滴，每个开发人员都可以学习如何使用加密算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从开发人员的角度理解密码学概念&lt;/strong&gt;不需要你是一个厉害的数学家。这个系列的文章将尽量以最浅显的方式教你&lt;strong&gt;应用密码学&lt;/strong&gt;的基础知识，而且包含大量循序渐进的代码示例和实践练习——就像你学习
Web 开发、数据库或 APP 开发一样。&lt;/p&gt;</description></item><item><title>secrets 管理工具 Vault 的介绍、安装及使用</title><link>https://thiscute.world/posts/experience-of-vault/</link><pubDate>Sun, 24 Jan 2021 09:31:41 +0800</pubDate><guid>https://thiscute.world/posts/experience-of-vault/</guid><description>&lt;p&gt;&lt;a href="https://github.com/hashicorp/vault" target="_blank" rel="noopener noreferrer"&gt;Vault&lt;/a&gt; 是 hashicorp 推出的 secrets 管理、加密即服务与权限管理工具。它的功能简介如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;secrets 管理：支持保存各种自定义信息、自动生成各类密钥，vault 自动生成的密钥还能自动轮转(rotate)&lt;/li&gt;
&lt;li&gt;认证方式：支持接入各大云厂商的账号体系（比如阿里云RAM子账号体系）或者 LDAP 等进行身份验证，不需要创建额外的账号体系。&lt;/li&gt;
&lt;li&gt;权限管理：通过 policy，可以设定非常细致的 ACL 权限。&lt;/li&gt;
&lt;li&gt;密钥引擎：也支持接管各大云厂商的账号体系（比如阿里云RAM子账号体系），实现 API Key 的自动轮转。&lt;/li&gt;
&lt;li&gt;支持接入 kubernetes rbac 认证体系，通过 serviceaccount+role 为每个 Pod 单独配置认证角色。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;支持通过 sidecar/init-container 将 secrets 注入到 pod 中，或者通过 k8s operator 将 vault
数据同步到 k8s secrets 中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用 Vault 之前，我们是以携程开源的 &lt;a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener noreferrer"&gt;Apollo&lt;/a&gt; 作为微服务的分布式配置中心。&lt;/p&gt;</description></item><item><title>JWT 签名算法 HS256、RS256 及 ES256 及密钥生成</title><link>https://thiscute.world/posts/jwt-algorithm-key-generation/</link><pubDate>Tue, 03 Mar 2020 14:09:46 +0800</pubDate><guid>https://thiscute.world/posts/jwt-algorithm-key-generation/</guid><description>&lt;h1 id="签名算法" class="headerLink"&gt;
 &lt;a href="#%e7%ad%be%e5%90%8d%e7%ae%97%e6%b3%95" class="header-mark"&gt;&lt;/a&gt;签名算法&lt;/h1&gt;&lt;p&gt;介绍具体的 JWT 签名算法前，先解释一下签名、摘要/指纹、加密这几个名词的含义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数字签名(Digital Signature): 就和我们日常办理各种手续时需要在文件上签上你自己的名字一样，数字签名的主要用途也是用于身份认证。
&lt;ol&gt;
&lt;li&gt;更准确的讲，数字签名可保证数据的三个特性：真实性（未被伪造）、完整性（不存在缺失）、不可否认性（确实是由你本人认可并签名）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数字摘要(digest)/数字指纹(fingerprint): 指的是数据的 Hash 值。&lt;/li&gt;
&lt;li&gt;加密算法：这个应该不需要解释，就是对数据进行加密。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数字签名的具体实现，通常是先对数据进行一次 Hash 摘要(SHA1/SHA256/SHA512 等)，然后再使用非对称加密算法(RSA/ECDSA 等)的私钥对这个摘要进行加密，这样得到的结果就是原始数据的一个签名。&lt;/p&gt;</description></item></channel></rss>